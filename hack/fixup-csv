#!/usr/bin/env python3

"""
Add various important bits to the CSV file which are not automatically
generated by operator-sdk generate bundle

Workaround for InvalidWebhookDescription, by adding a prefix to each based on type e.g.
 Warning  InvalidWebhookDescription  3m16s (x12 over 3m31s)  operator-lifecycle-manager  CSV contains repeated WebhookDescription name
For reference, see the prefixes given to each webhook definition in:
https://docs.openshift.com/container-platform/4.7/operators/operator_sdk/osdk-generating-csvs.html#olm-defining-csv-webhook_osdk-generating-csvs

Usage:
  hack/fixup-csv < build/bundle/cert-manager.clusterserviceversion.yaml > 1.4.0/manifests/cert-manager.clusterserviceversion.yaml

Important ClusterServiceVersion (CSV) file references:
[Required Fields]: https://github.com/operator-framework/community-operators/blob/73b8b5a217b818aa0320a7f18b6a69d50e996da9/docs/packaging-required-fields.md
[Available Categories]: https://github.com/operator-framework/community-operators/blob/73b8b5a217b818aa0320a7f18b6a69d50e996da9/categories.json
"""
import argparse
import base64
import mimetypes
import sys
from datetime import datetime

import yaml


class literal(str):
    """
    See https://til.simonwillison.net/python/style-yaml-dump
    """


def literal_presenter(dumper, data):
    return dumper.represent_scalar("tag:yaml.org,2002:str", data, style=">")


yaml.add_representer(literal, literal_presenter)


DISPLAY_NAME = "cert-manager"

DESCRIPTION = literal("""
cert-manager is a Kubernetes add-on to automate the management and issuance of TLS certificates from various issuing sources.
It will ensure certificates are valid and up to date periodically, and attempt to renew certificates at an appropriate time before expiry.
""".strip())
MATURITY = "stable"

MIN_KUBERNETES_VERSION = "1.16.0"

KEYWORDS = sorted("""
TLS
secrets
security
certificates
""".strip().splitlines())

LINKS = [
    dict(
        name="Documentation",
        url="https://cert-manager.io/",
    ),
]

PROVIDER = dict(
    name="The cert-manager maintainers",
    url="https://cert-manager.io/",
)

MAINTAINERS = [
    dict(
        name="The cert-manager maintainers",
        email="cert-manager-maintainers@googlegroups.com",
    ),
]

ALM_EXAMPLES = literal("""
[
  {
      "apiVersion": "cert-manager.io/v1",
      "kind": "Issuer",
      "metadata": {
          "name": "test-selfsigned",
          "namespace": "cert-manager-test"
      },
      "spec": {
          "selfSigned": {}
      }
  },
  {
      "apiVersion": "cert-manager.io/v1",
      "kind": "Certificate",
      "metadata": {
          "name": "selfsigned-cert",
          "namespace": "cert-manager-test"
      },
      "spec": {
          "dnsNames": [
              "example.com"
          ],
          "issuerRef": {
              "name": "test-selfsigned"
          },
          "secretName": "selfsigned-cert-tls"
      }
  }
]
""".strip())


def main():
    """
    Fix various fields in the CSV
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("--logo", dest="logo", action="store", required=True)
    args = parser.parse_args()
    with open(args.logo, "rb") as logo_file:
        logo_b64 = base64.standard_b64encode(logo_file.read())
    logo_type, _ = mimetypes.guess_type(args.logo)
    doc = yaml.safe_load(sys.stdin)

    doc["metadata"]["annotations"]["capabilities"] = "Full Lifecycle"
    doc["metadata"]["annotations"]["categories"] = "Security"
    doc["metadata"]["annotations"]["containerImage"] = "quay.io/jetstack/cert-manager-controller:v1.4.0"
    doc["metadata"]["annotations"]["createdAt"] = datetime.utcnow().isoformat(timespec="seconds")
    doc["metadata"]["annotations"]["support"] = "The cert-manager maintainers"
    doc["metadata"]["annotations"]["repository"] = "https://github.com/jetstack/cert-manager"
    doc["metadata"]["annotations"]["alm-examples"] = ALM_EXAMPLES
    doc["spec"]["icon"] = [{
        "base64data": logo_b64.decode("ascii"),
        "mediatype": logo_type,
    }]
    doc["spec"]["displayName"] = DISPLAY_NAME
    doc["spec"]["description"] = DESCRIPTION
    doc["spec"]["minKubeVersion"] = MIN_KUBERNETES_VERSION
    doc["spec"]["keywords"] = KEYWORDS
    doc["spec"]["links"] = LINKS
    doc["spec"]["maturity"] = MATURITY
    doc["spec"]["provider"] = PROVIDER
    doc["spec"]["maintainers"] = MAINTAINERS
    # Workaround for InvalidWebhookDescription. Explained at top of this file.
    prefixes = dict(
        ValidatingAdmissionWebhook="validate",
        MutatingAdmissionWebhook="mutate",
        ConversionWebhook="convert",
    )
    for webhook in doc["spec"]["webhookdefinitions"]:
        webhook["generateName"] = prefixes[webhook["type"]] + "." + "webhooks.cert-manager.io"
    yaml.dump(doc, sys.stdout)


if __name__ == "__main__":
    main()
